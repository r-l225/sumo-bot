#include <DFRobot_BMI160.h> 

// Gyroscope Variables
DFRobot_BMI160 bmi160;
const int8_t i2c_addr = 0x69;
float angle = 0;  // Store accumulated yaw angle

// IR Sensor Pins (ESP32 Feather V2)
int IRSensor1 = 36;
int IRSensor2 = 39;
int IRSensor3 = 34;
int IRSensor4 = 35;

const int trigPin = 26; //PIN A5 on Adafruit ESP32 Feather V2
const int echoPin = 25; //PIN A4 on Adafruit ESP32 Feather V2

//Motor Contorl Pins for ESP32-WROOM-32
const int L_IN1 = 2;   // Control pin 1 for left motor
const int L_IN2 = 0;   // Control pin 2 for left motor
const int R_IN3 = 4;   // Control pin 1 for right motor
const int R_IN4 = 16;  // Control pin 2 for right motor

// PWM frequency and resolution settings for ESP32
const int PWMFreq = 1000;       // PWM frequency in Hz
const int PWMResolution = 8;    // PWM resolution (8 bits)
const int MAX_SPEED = 255;      // Maximum PWM duty cycle
const int MIN_SPEED = 0;        // Minimum PWM duty cycle
const int STEP_DELAY = 1000;      // Delay between speed steps (in milliseconds)

// Thresholds
const int detectionThreshold = 60;

// State Machine
enum State { SEARCHING, MOVING_FORWARD, AVOID, STOPPED };
volatile State currentState = SEARCHING;

volatile uint8_t boundaryCode = 0xF;
volatile bool opponentDetected = false;

// Task handles
TaskHandle_t Task1;  // Sensor reading task
TaskHandle_t Task2;  // Motor control task

void IR_Sensor_setup();
uint8_t IR_Sensor_read();
void ultra_Sensor_setup();
float ultra_Sensor_read();
void TaskSensors(void *pvParameters);
void TaskNavigation(void *pvParameters);
void forwardMotors();
void rotateMotors();
void stopMotors();
void reverseMotors();
void turnLeft();
void turnRight();
void changeState();
void readGyroData();

void setup() {
  Serial.begin(115200);

  IR_Sensor_setup();
  ultra_Sensor_setup();

  // Initialize the BMI160 gyroscope
  if (bmi160.softReset() != BMI160_OK) {
    Serial.println("Gyroscope reset failed.");
    while (1);
  }
  if (bmi160.I2cInit(i2c_addr) != BMI160_OK) {
    Serial.println("Gyroscope initialization failed.");
    while (1);
  }

  // Motor pin setup
  ledcAttach(L_IN1,  PWMFreq, PWMResolution);
  ledcAttach(L_IN2,  PWMFreq, PWMResolution);
  ledcAttach(R_IN3,  PWMFreq, PWMResolution);
  ledcAttach(R_IN4,  PWMFreq, PWMResolution);

  // Create the sensor and navigation tasks
  xTaskCreatePinnedToCore(TaskSensors, "TaskSensors", 10000, NULL, 2, &Task1, 1);  // Core 1 for sensors and state management
  xTaskCreatePinnedToCore(TaskNavigation, "TaskNavigation", 10000, NULL, 1, &Task2, 0);  // Core 0 for motor control
}

void loop() {
}

// Core 1: Sensor data collection and state management
void TaskSensors(void *pvParameters) {
  for (;;) {
    boundaryCode = IR_Sensor_read();
    float distance = ultra_Sensor_read();
    opponentDetected = (distance < detectionThreshold);
    changeState();
    vTaskDelay(100 / portTICK_PERIOD_MS);
  }
}

// Handle state changes based on sensor input
void changeState() {
  if (boundaryCode != 0xF) {
    currentState = AVOID;
    Serial.println("State changed to avoid.");
  } else if (opponentDetected) {
    currentState = MOVING_FORWARD;
    Serial.println("State changed to move forward.");
  } else {
    currentState = SEARCHING;
    Serial.println("State cahnged to searching.");
  }
}

// Core 0: Navigation and motor control
void TaskNavigation(void *pvParameters) {
  for (;;) {
    switch (currentState) {
      case SEARCHING:
      Serial.println("Searshing.");
       rotateMotors();
        break;
      case MOVING_FORWARD:
      Serial.println("Moving Forward.");
       forwardMotors(); 
        break;
      case AVOID:
      Serial.println("Avoid.");
       handleBoundaryMovement();
        break;
      case STOPPED:
      Serial.println("Stopped.");
        StopMotors();
        break;
    }
    vTaskDelay(100 / portTICK_PERIOD_MS);
  }
}

// Read gyroscope data and update the yaw angle
void readGyroData() {
  int16_t accelGyro[6] = {0};
  if (bmi160.getAccelGyroData(accelGyro) == 0) {
    float yaw = (accelGyro[2] * 3.14 / 180.0 + 0.18) * 9 / 7;
    if (yaw > 0.25) {
      angle += yaw / 3.14;
    } else if (yaw <= 0.25 && yaw >= -0.25) {
      angle += 0;
    } else {
      angle -= abs(yaw / 3.14);
    }
  }
}

void handleBoundaryMovement() {
  switch (boundaryCode) {
    case 0x7:
      //turnRight();
      reverseMotors();
      break;
    case 0xB:
      //turnLeft();
      reverseMotors();
      break;
    case 0x3:
      reverseMotors();
      break;
    case 0xC:
      forwardMotors();
      break;
    case 0x5:
      //turnRight();
      reverseMotors();
      break;
    case 0xA:
      //turnLeft();
      reverseMotors();
      break;
    case 0xF:
      forwardMotors();
      break;
    default:
      decelerateStop();
      break;
  }
}

void IR_Sensor_setup() {
  pinMode(IRSensor1, INPUT);
  pinMode(IRSensor2, INPUT);
  pinMode(IRSensor3, INPUT);
  pinMode(IRSensor4, INPUT);
}

uint8_t IR_Sensor_read() {
  int status1 = digitalRead(IRSensor1);
  int status2 = digitalRead(IRSensor2);
  int status3 = digitalRead(IRSensor3);
  int status4 = digitalRead(IRSensor4);
  return (status4 << 3) | (status3 << 2) | (status2 << 1) | status1;
}

void ultra_Sensor_setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

float ultra_Sensor_read() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  return (duration * 0.034) / 2;
}

// Forward movement 
void forwardMotors() {
  Serial.println("Moving Forward.");
  ledcWrite(L_IN1, 100);  // Full speed forward for left motor
  ledcWrite(L_IN2, 0);    // Left motor IN2 off

  ledcWrite(R_IN3, 100);  // Full speed forward for right motor
  ledcWrite(R_IN4, 0);    // Right motor IN4 off // Full speed forward for right motor
}

void rotateMotors() {
  Serial.println("Rotating.");
  ledcWrite(L_IN1, 100);  // Medium speed forward for left motor
  ledcWrite(L_IN2, 0);    // Left motor IN2 off

  ledcWrite(R_IN3, 0);    // Right motor IN3 off
  ledcWrite(R_IN4, 100);  // Medium speed backward for right motor
}

void StopMotors() {
  // Set all motor pins to zero for full stop
  ledcWrite(L_IN1, 0);
  ledcWrite(L_IN2, 0);
  ledcWrite(R_IN3, 0);
  ledcWrite(R_IN4, 0);
}

void decelerateStop() {
  int currentSpeed = MAX_SPEED;
  while (currentSpeed > MIN_SPEED) {
    ledcWrite(L_IN1, currentSpeed);  // Left motor IN1
    ledcWrite(L_IN2, 0);             // Left motor IN2 off
    ledcWrite(R_IN3, currentSpeed);  // Right motor IN3
    ledcWrite(R_IN4, 0);             // Right motor IN4 off
    currentSpeed -= 10;              // Reduce speed gradually
    delay(STEP_DELAY);               // Delay between speed steps
  }
  StopMotors();
  Serial.println("Decelerating to Stop");
}

void reverseMotors() {
  ledcWrite(L_IN1, 0);    // Left motor IN1 off
  ledcWrite(L_IN2, 100);  // Medium speed backward for left motor

  ledcWrite(R_IN3, 0);    // Right motor IN3 off
  ledcWrite(R_IN4, 100);  // Medium speed backward for right motor
}
